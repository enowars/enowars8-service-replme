import random


def alphanumeric_to_long(s, reverse_bytes=False):
    ret = 0
    for c in s:
        ret = ret << 8
        v = ord(c)
        if reverse_bytes:
            v = int("{:08b}".format(v)[::-1], 2)
        if v == 0b110000:
            ret = ret ^ 0b1100000
        elif v >= 0b110010 and v <= 0b110101:
            ret = ret ^ (v + 74)
        else:
            ret = ret ^ v
    return ret


def long_to_alphanumeric(n, reverse_bytes=False):
    s = []
    while n > 0:
        c = n & 0xFF
        if reverse_bytes:
            c = int("{:08b}".format(c)[::-1], 2)
        if c == 0b1100000:
            s.append(0b110000)
        elif c >= 0b1111011 and c <= 0b01111111:
            s.append(c - 74)
        else:
            s.append(c)
        n = n >> 8
    s.reverse()
    return bytes(s).decode()


def get_random_delta():
    n = random.randint(1, 100000)
    print(n)
    f = 0
    with open("deltas.txt", "r") as file:
        f = int(file.readline(), 16)
        if n > 1:
            for num, line in enumerate(file, start=2):
                if num == n:
                    return int(line, 16)
    return f


def exploit0_apply_delta(s):
    delta = get_random_delta()
    n = alphanumeric_to_long(s)
    n = n ^ delta
    return long_to_alphanumeric(n)
